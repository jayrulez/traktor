--[[
 TRAKTOR
 Copyright (c) 2022-2024 Anders Pistol.

 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at https://mozilla.org/MPL/2.0/.
]]

-- Install or update all 3rdp dependencies.

import(traktor)
import(traktor.run)

local function platform_select(default, windows)
	if os.identifier == "windows" then return windows end
	return default
end

-- External tools
local GIT = platform_select("git", "git")
local WGET = platform_select("wget", "$(TRAKTOR_HOME)/bin/win64/wget")
local TAR = platform_select("tar", "tar")
local UNZIP = platform_select("unzip", "$(TRAKTOR_HOME)/bin/win64/unzip")

-- Packages
local PACKAGES =
{
	-- Antigrain
	{
		type = "GIT",
		url = "https://github.com/ghaerr/agg-2.6.git",
		license = "BSD"
	},

	-- ASTC encoder
	{
		type = "GIT",
		url = "https://github.com/ARM-software/astc-encoder.git",
		patch = function()
			generate_configuration(
				"Source/astcenccli_version.h.in",
				"Source/astcenccli_version.h",
				{
					["@astcencoder_VERSION@"] = "4.0.0",
					["@astcencoder_YEAR@"] = "2022"
				}
			)
		end,
		license = "Apache 2.0"
	},

	-- Bullet
	{
		type = "GIT",
		url = "https://github.com/bulletphysics/bullet3.git",
		license = "ZLIB"
	},

	-- Intel Embree
	{
		type = "GET",
		name = "embree-linux",
		os = "linux",
		url = "https://github.com/RenderKit/embree/releases/download/v4.3.3/embree-4.3.3.x86_64.linux.tar.gz",
		patch = function()
			run:execute(TAR .. " -xzf embree-4.3.3.x86_64.linux.tar.gz")
		end,
		license = "Apache 2.0"
	},
	{
		type = "GET",
		name = "embree-windows",
		os = "windows",
		url = "https://github.com/RenderKit/embree/releases/download/v4.3.3/embree-4.3.3.x64.windows.zip",
		patch = function()
			run:execute(UNZIP .. " -qq embree-4.3.3.x64.windows.zip")
		end,
		license = "Apache 2.0"
	},
	{
		type = "GET",
		name = "embree-macOS",
		os = "macos",
		url = "https://github.com/RenderKit/embree/releases/download/v4.3.3/embree-4.3.3.x86_64.macosx.zip",
		patch = function()
			run:execute(UNZIP .. " -qq embree-4.3.3.x86_64.macosx.zip")
		end,
		license = "Apache 2.0"
	},

	-- FLAC
	{
		type = "GIT",
		url = "https://github.com/xiph/flac.git",
		license = "BSD"
	},

	-- Expat
	{
		type = "GIT",
		url = "https://github.com/libexpat/libexpat.git",
		license = "MIT"
	},

	-- OGG
	{
		type = "GIT",
		url = "https://github.com/xiph/ogg.git",
		license = "BSD"
	},

	-- Theora
	{
		type = "GIT",
		url = "https://github.com/xiph/theora.git",
		license = "BSD"
	},	

	-- Vorbis
	{
		type = "GIT",
		url = "https://github.com/xiph/vorbis.git",
		license = "BSD"
	},

	-- PNG
	{
		type = "GIT",
		url = "https://github.com/glennrp/libpng.git",
		license = "PNG"
	},

	-- LUA
	{
		type = "GET",
		name = "lua",
		url = "https://lua.org/ftp/lua-5.4.6.tar.gz",
		patch = function()
			run:execute(TAR .. " -xzf lua-5.4.6.tar.gz")
		end,
		license = "MIT"
	},

	-- MikkTSpace
	{
		type = "GIT",
		url = "https://github.com/mmikk/MikkTSpace.git",
		license = "PD"
	},

	-- SQLite
	{
		type = "GET",
		name = "sqlite",
		url = "https://www.sqlite.org/2022/sqlite-amalgamation-3390200.zip",
		patch = function()
			run:execute(UNZIP .. " -qq sqlite-amalgamation-3390200.zip")
		end,
		license = "PD"
	},

	-- XAtlas
	{
		type = "GIT",
		url = "https://github.com/jpcy/xatlas.git",
		license = "MIT"
	},

	-- Zlib
	{
		type = "GIT",
		os = "linux",
		url = "https://github.com/madler/zlib.git",
		patch = function()
			run:execute("sh ./configure")
		end,
		license = "ZLIB"
	},
	{
		type = "GIT",
		os = "windows",
		url = "https://github.com/madler/zlib.git",
		license = "ZLIB"
	},

	-- JPEG
	{
		type = "GET",
		os = "linux",
		name = "jpeg",
		url = "http://www.ijg.org/files/jpegsrc.v9e.tar.gz",
		patch = function()
			run:execute(TAR .. " -xzf jpegsrc.v9e.tar.gz")
			run:pushd("jpeg-9e")
			run:execute("sh ./configure")
			run:popd()
		end,
		license = "JPEG"
	},
	{
		type = "GET",
		os = "windows",
		name = "jpeg",
		url = "http://www.ijg.org/files/jpegsrc.v9e.tar.gz",
		patch = function()
			run:execute(TAR .. " -xzf jpegsrc.v9e.tar.gz")
			run:pushd("jpeg-9e")
			run:copy("jconfig.vc", "jconfig.h")
			run:popd()
		end,
		license = "JPEG"
	},

	-- FreeType
	{
		type = "GIT",
		url = "https://gitlab.freedesktop.org/freetype/freetype.git",
		patch = function()
			run:mkdir("build")
			run:pushd("build")
			run:execute("env --default-signal cmake -DCMAKE_BUILD_TYPE=Release -D FT_DISABLE_HARFBUZZ=TRUE ..")
			run:popd()
		end,
		license = "FreeType"
	},

	-- Squish
	{
		type = "GIT",
		url = "https://github.com/Cavewhere/squish.git",
		license = "MIT"
	},

	-- LZF
	{
		type = "GET",
		name = "liblzf",
		url = "http://dist.schmorp.de/liblzf/liblzf-3.6.tar.gz",
		patch = function()
			run:execute(TAR .. " -xzf liblzf-3.6.tar.gz")
		end,
		license = "LZF"
	},

	-- STB
	{
		type = "GIT",
		url = "https://github.com/nothings/stb.git",
		license = "MIT,PD"
	},

	-- TinyEXR
	{
		type = "GIT",
		url = "https://github.com/syoyo/tinyexr.git",
		license = "BSD"
	},

	-- RapidJSON
	{
		type = "GIT",
		url = "https://github.com/Tencent/rapidjson.git",
		license = "MIT"
	},

	-- RG ETC1
	{
		type = "GIT",
		url = "https://github.com/richgel999/rg-etc1.git",
		license = "ZLIB"
	},

	-- Recast
	{
		type = "GIT",
		url = "https://github.com/recastnavigation/recastnavigation.git",
		license = "ZLIB"
	},

	-- P4 API
	{
		type = "GET",
		name = "p4api-linux",
		os = "linux",
		url = "https://www.perforce.com/downloads/perforce/r22.1/bin.linux26x86_64/p4api.tgz",
		patch = function()
			write_file(
				"install.sh",
				{
					"#/bin/sh",
					TAR .. " -xzf p4api.tgz",
					"mv p4api-* p4api"
				}
			)
			run:execute("sh ./install.sh")			
		end
	},

	-- Vulkan SDK
	{
		type = "GET",
		name = "vulkan-linux",
		os = "linux",
		url = "https://sdk.lunarg.com/sdk/download/latest/linux/vulkan-sdk.tar.xz",
		patch = function()
			write_file(
				"install.sh",
				{
					"#/bin/sh",
					TAR .. " -xf vulkan-sdk.tar.xz",
					"mv $(ls -d */) latest"
				}
			)
			run:execute("sh ./install.sh")
		end
	},
	{
		type = "GET",
		name = "vulkan-windows",
		os = "windows",
		url = "https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe",
		patch = function()
			local p = run.cwd .. "/vulkan-sdk"
			run:execute(
				"vulkan-sdk.exe --root " .. p .. " --accept-licenses --default-answer --confirm-command install com.lunarg.vulkan.vma com.lunarg.vulkan.debug copy_only=1",
				nil,
				nil,
				true
			)
		end
	},

	-- SPIRV tools
	{
		type = "GET",
		name = "spirv-tools",
		os = "linux",		
		url = "https://storage.googleapis.com/spirv-tools/badges/build_link_linux_gcc_release.html",
		patch = function()
			run:execute(UNZIP .. " -qq install.zip")
		end,
	},
	{
		type = "GET",
		name = "spirv-tools",
		os = "windows",
		-- url = "https://storage.googleapis.com/spirv-tools/badges/build_link_windows_vs2019_release.html"
		url = "https://storage.googleapis.com/spirv-tools/artifacts/prod/graphics_shader_compiler/spirv-tools/windows-msvc-2019-release/continuous/515/20240924-081643/install.zip",
		patch = function()
			run:execute(UNZIP .. " -qq install.zip")
		end,
	},

	-- Vulkan Memory Allocator
	{
		type = "GIT",
		url = "https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git",
		license = "MIT"
	},

	--[[
	-- Steamworks SDK
	{
		type = "GET",
		name = "steamworks",
		url = "https://partner.steamgames.com/downloads/steamworks_sdk.zip",
		patch = function()
			run:execute(UNZIP .. "steamworks_sdk.zip")
		end
	},
	]]

	-- Android SDK
	{
		type = "GET",
		name = "android-sdk-linux",
		os = "linux",
		url = "https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip",
		patch = function()
			run:execute(UNZIP .. " -qq commandlinetools-linux-11076708_latest.zip")
			run:execute("./cmdline-tools/bin/sdkmanager --sdk_root=. --update")
			write_file(
				"install.sh",
				{
					"#/bin/sh",
					"echo y | ./cmdline-tools/bin/sdkmanager --sdk_root=. platform-tools",
					"echo y | ./cmdline-tools/bin/sdkmanager --sdk_root=. ndk-bundle"
				}
			)
			run:execute("sh ./install.sh")
		end
	},
	{
		type = "GET",
		name = "android-sdk-windows",
		os = "windows",
		url = "https://dl.google.com/android/repository/commandlinetools-win-11076708_latest.zip",
		patch = function()
			run:execute(UNZIP .. " -qq commandlinetools-win-11076708_latest.zip")
			run:execute("./cmdline-tools/bin/sdkmanager --sdk_root=. --update")
			write_file(
				"install.bat",
				{
					"./cmdline-tools/bin/sdkmanager --sdk_root=. platform-tools",
					"./cmdline-tools/bin/sdkmanager --sdk_root=. ndk-bundle"
				}
			)
			run:execute("./install.bat")
		end
	},

	-- Lemon
	{
		type = "GIT",
		url = "https://github.com/compiler-dept/lemon.git",
		license = "SQLITE"
	},

	-- vswhere
	{
		type = "GET",
		name = "vswhere-windows",
		os = "windows",
		url = "https://github.com/microsoft/vswhere/releases/download/3.0.3/vswhere.exe"
	},

	-- WIX
	{
		type = "GET",
		name = "wix-windows",
		os = "windows",
		url = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip",
		patch = function()
			run:execute(UNZIP .. " -qq wix311-binaries.zip")
		end
	},

	-- RenderDoc
	{
		type = "GET",
		name = "renderdoc",
		os = "linux",
		url = "https://renderdoc.org/stable/1.35/renderdoc_1.35.tar.gz",
		patch = function()
			run:execute(TAR .. " -xf renderdoc_1.35.tar.gz")
		end
	},
	{
		type = "GET",
		name = "renderdoc",
		os = "windows",
		url = "https://renderdoc.org/stable/1.35/RenderDoc_1.35_64.zip",
		patch = function()
			run:execute(UNZIP .. " -qq RenderDoc_1.35_64.zip")
		end
	},

	-- Doxygen
	{
		type = "GET",
		name = "doxygen",
		os = "windows",
		url = "https://www.doxygen.nl/files/doxygen-1.9.6.windows.x64.bin.zip",
		patch = function()
			run:execute(UNZIP .. " -qq doxygen-1.9.6.windows.x64.bin.zip")
		end
	},

	-- bc6h_enc
	{
		type = "GIT",
		url = "https://github.com/0xc0de/bc6h_enc.git",
		license = "MIT"
	},

	-- minimp3
	{
		type = "GIT",
		name = "minimp3",
		url = "https://github.com/lieff/minimp3.git",
		license = "CC0"
	},

	-- mimalloc
	{
		type = "GIT",
		name = "mimalloc",
		url = "https://github.com/microsoft/mimalloc.git",
		license = "MIT"
	},

	-- ufbx
	{
		type = "GIT",
		name = "ufbx",
		url = "https://github.com/ufbx/ufbx.git",
		license = "MIT"
	},
    
	-- TurboBadger
	{
		type = "GIT",
		name = "turbobadger",
		url = "https://github.com/jayrulez/turbobadger.git",
		branch = "traktor",
		license = "MIT"
	},
}

--[[
	Write text file.
]]
function write_file(fn, lines)
	local f = fileSystem:open(Path(run.cwd .. "/" .. fn), File.FmWrite)
	if f == nil then return false end
	local so = StreamOutput(f, Utf8Encoding())
	for _, ln in ipairs(lines) do
		so:printLn(ln)
	end
	f:close()
end

--[[
	Generate files similar to CMake configuration files,
	since we don't have CMake environment we need to provide keys and values manually.
]]
function generate_configuration(infile, outfile, kv)
	local inf = fileSystem:getAbsolutePath(Path(run.cwd)).pathNameOS .. "/" .. infile
	local utf = fileSystem:getAbsolutePath(Path(run.cwd)).pathNameOS .. "/" .. outfile
	local txt = {}

	-- Read entire file into array.
	local f = fileSystem:open(Path(inf), File.FmRead)
	if f == nil then return false end
    local r = StringReader(f, Utf8Encoding())
    while true do
        local ln = r:readLine()
        if ln == nil then break end
        table.insert(txt, ln)
    end
    f:close()

	-- Write out entire file from array, modify lines as we go along.
	local f = fileSystem:open(Path(utf), File.FmWrite)
	if f == nil then return false end
	local s = StreamOutput(f, Utf8Encoding())
	for _, ln in ipairs(txt) do
		for k, v in pairs(kv) do
			ln = ln:gsub(k, v)
		end
		s:printLn(ln)
	end
    f:close()

	return true
end

--[[
	Update package, if package not found then it will be installed appropriately.
]]
function update(pkg)

	-- Check if package is necessary on current host.
	if pkg.os ~= nil and os.identifier ~= pkg.os then
		return true
	end

	local gitEnable < const > = true
	local getEnable < const > = true

	stdout:printLn("")
	stdout:printLn("===============================================================================")
	stdout:printLn("")

	if pkg.type == "GIT" and gitEnable then

		local name = pkg.url:match(".+/(.*).git")
		if name == nil then
			stderr:printLn("Unable to extract repo name from url " .. pkg.url)
			return false
		end

		local result = true
		if run:exist(name) then
			stdout:printLn("Updating " .. pkg.url)
			run:pushd(name)
			if result and pkg.branch ~= nil then
			    result = (run:execute(GIT .. " checkout " .. pkg.branch) == 0)
			end
			git_pull_cmd = GIT .. " pull --rebase --autostash"
			if pkg.branch ~= nil then
			    git_pull_cmd = git_pull_cmd .. " origin " .. pkg.branch
			end
			result = result and (run:execute(git_pull_cmd) == 0)
			result = result and (run:execute(GIT .. " submodule update") == 0)
			run:popd()
			if result and pkg.post_update ~= nil then
				stdout:printLn("Running post update...")
				run:pushd(name)
				pkg.post_update()
				run:popd()
			end			
		else
			stdout:printLn("Cloning " .. pkg.url)
			if pkg.branch ~= nil then
				git_branch = "--branch " .. pkg.branch
			end
			git_clond_cmd = GIT .. " clone " .. git_branch .. " --depth 1 --recurse-submodules " .. pkg.url
			result = (run:execute(git_clond_cmd) == 0)
			if result and pkg.post_clone ~= nil then
				stdout:printLn("Running post clone...")
				run:pushd(name)
				pkg.post_clone()
				run:popd()
			end
		end

		if not result then
			stderr:printLn("GIT failed!")
			return false
		end

		if pkg.patch ~= nil then
			run:pushd(name)
			stdout:printLn("Patching (" .. run.cwd .. ")...")
			pkg.patch()
			run:popd()
		end

		run:pushd(name)
		result = (run:execute(GIT .. " log -1 --format=format:\"Current hash: %H\"") == 0)
		run:popd()
		if not result then
			stderr:printLn("GIT current hash failed!")
			return false
		end

	elseif pkg.type == "GET" and getEnable then

		if run:exist(pkg.name) then
			stdout:printLn("Path \"" .. pkg.name .. "\" already exist; assuming up to date.")
			return true
		end

		local file = pkg.url:match(".+/(.*)")
		if file == nil then
			stderr:printLn("Unable to extract file name from url " .. pkg.url)
			return false
		end

		stdout:printLn("Downloading " .. file .. " into " .. pkg.name .. " ...")

		run:mkdir(pkg.name)
		run:pushd(pkg.name)
		local result = run:execute(WGET .. " " .. pkg.url)
		run:popd()

		if result ~= 0 then
			stderr:printLn("GET failed \"" .. pkg.url .. "\", error code " .. result)
			run:rmdir(pkg.name)
			return false
		end

		if pkg.patch ~= nil then
			run:pushd(pkg.name)
			stdout:printLn("Patching (" .. run.cwd .. ")...")
			pkg.patch()
			run:popd()
		end		

	else
		stderr:printLn("Unknown package type " .. pkg.type)
		return false
	end

	return true
end

function main(argv)
	if not run:mkdir("3rdp") then
		stderr:printLn("Unable to create output directory.")
		return 1
	end
	run:pushd("3rdp")
	for _, pkg in ipairs(PACKAGES) do
		update(pkg)
	end
	run:popd()
	return 0
end
