--[[
 TRAKTOR
 Copyright (c) 2022-2025 Anders Pistol.

 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at https://mozilla.org/MPL/2.0/.
]]

-- Install or update all 3rdp dependencies.

import(traktor)
import(traktor.run)

local function platform_select(default, windows)
	if os.identifier == "windows" then return windows end
	return default
end

-- External tools
GIT   = platform_select("git", "git")
WGET  = platform_select("wget", "$(TRAKTOR_HOME)/bin/win64/wget")
TAR   = platform_select("tar", "tar")
UNZIP = platform_select("unzip", "$(TRAKTOR_HOME)/bin/win64/unzip")

-- Load packages list from script.
local packagesFile = "$(RUN_SCRIPT_PATH)/packages.run"
if run.commandLine ~= nil and run.commandLine:hasOption("packages") then
	local opt = run.commandLine:getOption("packages")
	assert(opt ~= nil)
	packagesFile = opt:getString()
end
if not run:loadScript(packagesFile) then
	stderr:printLn("Unable to load packages script \"" .. packagesFile .. "\".")
	return
end
if PACKAGES == nil then
	stderr:printLn("No PACKAGES defined in packages script \"" .. packagesFile .. "\".")
	return
end

--[[
	Write text file.
]]
function write_file(fn, lines)
	local f = fileSystem:open(Path(run.cwd .. "/" .. fn), File.FmWrite)
	if f == nil then return false end
	local so = StreamOutput(f, Utf8Encoding())
	for _, ln in ipairs(lines) do
		so:printLn(ln)
	end
	f:close()
end

--[[
	Generate files similar to CMake configuration files,
	since we don't have CMake environment we need to provide keys and values manually.
]]
function generate_configuration(infile, outfile, kv)
	local inf = fileSystem:getAbsolutePath(Path(run.cwd)).pathNameOS .. "/" .. infile
	local utf = fileSystem:getAbsolutePath(Path(run.cwd)).pathNameOS .. "/" .. outfile
	local txt = {}

	-- Read entire file into array.
	local f = fileSystem:open(Path(inf), File.FmRead)
	if f == nil then return false end
    local r = StringReader(f, Utf8Encoding())
    while true do
        local ln = r:readLine()
        if ln == nil then break end
        table.insert(txt, ln)
    end
    f:close()

	-- Write out entire file from array, modify lines as we go along.
	local f = fileSystem:open(Path(utf), File.FmWrite)
	if f == nil then return false end
	local s = StreamOutput(f, Utf8Encoding())
	for _, ln in ipairs(txt) do
		for k, v in pairs(kv) do
			ln = ln:gsub(k, v)
		end
		s:printLn(ln)
	end
    f:close()

	return true
end

--[[
	Update package, if package not found then it will be installed appropriately.
]]
function update(pkg)

	-- Check if package is necessary on current host.
	if pkg.os ~= nil and os.identifier ~= pkg.os then
		return true
	end

	local gitEnable < const > = true
	local getEnable < const > = true

	stdout:printLn("")
	stdout:printLn("===============================================================================")
	stdout:printLn("")

	-- Execute custom check first to see if we need to install this package.
	if pkg.check ~= nil then
		if pkg.check() == false then
			stdout:printLn("Package \"" .. pkg.url .. "\" skipped; not required.")
			return true
		end
	end

	if pkg.type == "GIT" and gitEnable then

		local name = pkg.url:match(".+/(.*).git")
		if name == nil then
			stderr:printLn("Unable to extract repo name from url " .. pkg.url)
			return false
		end

		local result = true
		if run:exist(name) then
			stdout:printLn("Updating " .. pkg.url)
			run:pushd(name)
			result = result and (run:execute(GIT .. " pull --rebase --autostash") == 0)
			result = result and (run:execute(GIT .. " submodule update") == 0)
			run:popd()
			if result and pkg.post_update ~= nil then
				stdout:printLn("Running post update...")
				run:pushd(name)
				pkg.post_update()
				run:popd()
			end			
		else
			stdout:printLn("Cloning " .. pkg.url)
			result = (run:execute(GIT .. " clone --recurse-submodules " .. pkg.url) == 0)
			if result and pkg.post_clone ~= nil then
				stdout:printLn("Running post clone...")
				run:pushd(name)
				pkg.post_clone()
				run:popd()
			end
		end

		if pkg.hash ~= nil then
			stdout:printLn("Checkout hash " .. pkg.hash .. "...")
			run:pushd(name)
			result = (run:execute(GIT .. " reset --hard " .. pkg.hash) == 0)
			run:popd()
		end

		if not result then
			stderr:printLn("GIT failed!")
			return false
		end

		if pkg.patch ~= nil then
			stdout:printLn("Patching (" .. run.cwd .. ")...")
			run:pushd(name)
			pkg.patch()
			run:popd()
		end

		run:pushd(name)
		result = (run:execute(GIT .. " log -1 --format=format:\"Current hash: %H\"") == 0)
		run:popd()
		if not result then
			stderr:printLn("GIT current hash failed!")
			return false
		end

	elseif pkg.type == "GET" and getEnable then

		if run:exist(pkg.name) then
			stdout:printLn("Path \"" .. pkg.name .. "\" already exist; assuming up to date.")
			return true
		end

		local file = pkg.url:match(".+/(.*)")
		if file == nil then
			stderr:printLn("Unable to extract file name from url " .. pkg.url)
			return false
		end

		stdout:printLn("Downloading " .. file .. " into " .. pkg.name .. " ...")

		run:mkdir(pkg.name)
		run:pushd(pkg.name)
		local result
		if pkg.target == nil then
			result = run:execute(WGET .. " " .. pkg.url)
		else
			result = run:execute(WGET .. " -O " .. pkg.target .. " " .. pkg.url)
		end
		run:popd()

		if result ~= 0 then
			stderr:printLn("GET failed \"" .. pkg.url .. "\", error code " .. result)
			run:rmdir(pkg.name)
			return false
		end

		if pkg.patch ~= nil then
			run:pushd(pkg.name)
			stdout:printLn("Patching (" .. run.cwd .. ")...")
			pkg.patch()
			run:popd()
		end		

	else
		stderr:printLn("Unknown package type " .. pkg.type)
		return false
	end

	return true
end

function main(argv)
	if not run:mkdir("3rdp") then
		stderr:printLn("Unable to create output directory.")
		return 1
	end
	run:pushd("3rdp")
	for _, pkg in ipairs(PACKAGES) do
		update(pkg)
	end
	run:popd()
	return 0
end
